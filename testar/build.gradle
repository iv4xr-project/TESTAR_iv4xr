plugins {
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'application'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
            excludes = ['settings/']
        }
    }

    oracle {
        java {
            srcDirs =['resources/settings']
        }

        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
}

/**
 * Task to run TESTAR using gradle
 * This task set the working directory to the install folder and runs testar.bat
 */
task runTestar(type: Exec) {
    // Make sure temp dir exists on case-sensitive OSs
    doFirst{
        new File("${project.buildDir}/install/testar/bin/output/temp").mkdirs()
    }

    group = 'custom_testar'
    description ='runTESTAR'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar.bat'

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		environment "JAVA_TOOL_OPTIONS", "-Djava.awt.headless=false"
		commandLine "./testar"
	} else if (System.getProperty("os.name").toLowerCase().contains("linux")) {
		commandLine "./testar"
	} else {
		commandLine 'cmd', '/c', 'testar.bat'
	}
}

/*  There's error on Linux, crashing the JVM on unregistering the NativeHook
    For now, use the old version, 2.1.1 should fix the issue
    https://github.com/kwhat/jnativehook/issues/168
 */
def jnativehook = System.getProperty("os.name").toLowerCase() == "linux"
        ? 'com.1stleg:jnativehook:2.0.2'
        : 'com.1stleg:jnativehook:2.1.0'

task customZipDistribution(type: Zip) {
	doFirst{
		new File("${project.buildDir}/install/testar/bin/settings","desktop_generic.sse").text=""
	}
    group = 'custom_testar'
    description ='customZipDistribution'
    from 'target/install/testar'
    include '*'
   	include '*/**' //include subdirectories

   	archiveName 'testarDistribution.zip'
   	destinationDir(file('target/install'))
}

/**
 * Prepare folder structure to run debuggin mode from IDE
 */
task debuggingDistribution(type: Exec, dependsOn:'debugFiles') {
    group = 'distribution_iv4XR'
    description ='debuggingDistribution'

    workingDir '.'
    commandLine 'cmd', '/c', 'dir'
}

task debugFiles(type: Copy) {
    from 'target/scripts/.'
    into '.'
}

task cleanDebugging(type: Exec, dependsOn:'deleteDebugging') {
    group = 'distribution_iv4XR'
    description ='cleanDebugging'

    workingDir '.'
    commandLine 'cmd', '/c', 'dir'
}

task deleteDebugging(type: Delete){
	delete 'settings'
	delete 'suts'
	delete 'output'
	delete 'testar'
	delete 'testar.bat'
	delete 'windows.dll'
	delete 'index.log'
}

dependencies {
    compile project(':core')
    compile project(':native')
    compile project(':graphdb')
    compile files('./lib/jsyntaxpane-1.1.5.jar')
    compile files('./lib/sikulixapi.jar')
    compile files('./lib/eye2.jar')
    compile files('./lib/gson-2.8.5.jar')
    compile files('./lib/aplib-1.2.0.jar')
    compile files('./lib/lab-recruits-api-2.2.jar')
    compile jnativehook
    compile 'com.google.guava:guava:26.0-jre'
    compile group: 'com.jgoodies', name: 'jgoodies-common', version: '1.8.1'
    compile group: 'com.jgoodies', name: 'jgoodies-forms', version: '1.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-annotations', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'apache-jsp', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'apache-jstl', version: '9.4.30.v20200611'
    compile group: 'commons-io', name: 'commons-io', version: '2.7'
    runtime project(':windows')
}
evaluationDependsOn(':windows')

task prepareSettings(type: Copy) {
    from 'resources/settings'
    into 'target/scripts/settings'
}

task prepareSUTs(type: Copy) {
    from 'distributionSUTs'
    into 'target/scripts/suts'
}

task prepareLabRecruitsResources(type: Copy) {  
    from '../iv4XR/resources'
    into 'target/scripts/suts'
}

task prepareOracles(type: Copy) {
    from 'target/classes/java/oracle'
    into 'target/scripts/settings'
}

task prepareOutputFolder(type: Copy) {
    from 'resources/output'
    into 'target/scripts/output'
}

/**
 * Copy existing testar/resources/windows10/windows.dll as temporally file
 */
task prepareCopyOfExistingWindows10dll(type: Copy) {
    from '../testar/resources/windows10'
    into 'target/scripts'
    include 'windows.dll'
}

/**
 * Copy windows.dll from the subproject windows into target scripts
 * so it can be used with the creation of the distribution.
 */
task prepareWindowsDLL(type: Copy) {
    if(new File('../windows/target/resources/main/windows.dll').exists()) {
        from '../windows/target/resources/main'
        into 'target/scripts'
        include 'windows.dll'
    }
}

applicationDistribution.from("../webdriver/resources/web-extension") {
    into "web-extension"
}

prepareOracles.dependsOn(oracleClasses)

/**
 * Set the arguments of the jvm in the start scripts.
 * To debug build TESTAR with the -DDEBUG=true.
 */
startScripts {
    if(System.getProperty('DEBUG', 'false') ) {
        applicationDefaultJvmArgs = ['-Dlog4j.configurationFile=log4j2.xml',
                                     '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
    } else {
        applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.xml"]
    }
    
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText
    }
}

startScripts.dependsOn {
    tasks.findAll { task -> task.name.startsWith('prepare')}
}

// Download LabRecruits SUT from the GitHub repository
task downloadLabRecruits(type: Download) {
    src 'https://github.com/iv4xr-project/TESTAR_iv4xr/releases/download/v2.0/labrecruits_v2_11_Jan_2021.zip'
    dest '../iv4XR/resources/gym/Windows/bin'
    overwrite false
}
// Verify that we downloaded the correct file
task verifyLabRecruits(type: Verify, dependsOn: downloadLabRecruits) {
    src new File(downloadLabRecruits.dest, 'labrecruits_v2_11_Jan_2021.zip')
    algorithm 'MD5'
    checksum '3f5cab5ad2e5bb3b5d2eea87f0e887f1'
}
// Extract LabRecruits binary files
task downloadAndUnzipLabRecruits(type: Copy, dependsOn: verifyLabRecruits) {
    group = 'distribution_iv4XR'
    description ='downloadAndUnzipLabRecruits'
    from zipTree(new File(downloadLabRecruits.dest, 'labrecruits_v2_11_Jan_2021.zip'))
    into downloadLabRecruits.dest
}

/**
 * Build TESTAR using Visual Studio Tools to create a windows.dll
 */

task iv4xrDefaultDistribution(dependsOn:['downloadAndUnzipLabRecruits','installDist','distZip']){
	group = 'distribution_iv4XR'
	description ='Build iv4xr TESTAR distribution making a copy of the default dll'
}

task iv4xrWindowsDistribution(dependsOn:['downloadAndUnzipLabRecruits','buildWindows','installDist','distZip']){
	group = 'distribution_iv4XR'
	description ='Build iv4xr TESTAR distribution for Windows'
}

build.dependsOn(downloadAndUnzipLabRecruits)

task buildWindows(type: Exec) {
    if( System.getProperty('os.name').toLowerCase().contains('windows 7')) {
        workingDir '../windows/native_src'
        commandLine 'cmd', '/c', 'compile_w7.bat'
    } else if( System.getProperty('os.name').toLowerCase().contains('windows')) {
        workingDir '../windows/native_src'
        commandLine 'cmd', '/c', 'compile_w10.bat'
    } else  {
        commandLine './dummy.sh'
    }
}
buildWindows.dependsOn classes

//running testar requires the distribution to be installed.
runTestar.dependsOn(iv4xrWindowsDistribution)
customZipDistribution.dependsOn(installDist)
debuggingDistribution.dependsOn(build)

mainClassName='org.fruit.monkey.Main'


/**
 * Tasks to test TESTAR iv4xr using gradle
 */

// Copy test protocols for CI
task init_workflow_test(type: Copy) {
    group = 'test_testar_iv4xr_workflow'
    description ='init_workflow_test'
    from 'resources/workflow/settings'
    into 'target/scripts/settings'
}

// Test labrecruits commands agent listener
task runTestLabrecruitsCommandAgentListener(type: Exec, dependsOn:'iv4xrDefaultDistribution') {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_iv4xr_workflow'
    description ='runTestLabrecruitsCommandAgentListener'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_workflow_labrecruits_commands_agent_listener AlwaysCompile=true ApplicationName="command_listener" ShowVisualSettingsDialogOnStartup=false Mode=Generate StateModelEnabled=false'
    doLast {
        String output = standardOutput.toString()

        // Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Test labrecruits goal agent listener
task runTestLabrecruitsGoalAgentListener(type: Exec, dependsOn:'iv4xrDefaultDistribution') {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_iv4xr_workflow'
    description ='runTestLabrecruitsGoalAgentListener'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_workflow_labrecruits_goal_agent_listener_complete AlwaysCompile=true ApplicationName="goal_listener" ShowVisualSettingsDialogOnStartup=false Mode=Generate StateModelEnabled=false'
    doLast {
        String output = standardOutput.toString()

        // Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Test labrecruits commands testar as agent explorer
task runTestLabrecruitsCommandExplore(type: Exec, dependsOn:'iv4xrDefaultDistribution') {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_iv4xr_workflow'
    description ='runTestLabrecruitsCommandExplore'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_workflow_labrecruits_testar_explore AlwaysCompile=true ApplicationName="command_explore" ShowVisualSettingsDialogOnStartup=false Mode=Generate StateModelEnabled=false'
    doLast {
        String output = standardOutput.toString()

        // Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}
